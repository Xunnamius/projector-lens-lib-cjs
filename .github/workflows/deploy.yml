# Releases and deploys commits, auto-merges PRs, and uploads test coverage info,
# etc using a privileged runner. To function, this workflow requires the working
# tree (including coverage info) and metadata artifacts at the following keys:
#   - `build-${{ runner.os }}-${{ github.sha }}`
#   - `metadata-${{ runner.os }}-${{ github.sha }}`
#
# * Note: feel free to run this workflow in forks (e.g. for testing your PR)
# * without worrying about this workflow attempting to deploy a package ðŸš€
#
# ! See also: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
# ! tl;dr: do not build anything or run any code or executables from the repo.
# ! Also for this reason, installing dependencies cannot happen either.
# ! Installed deps are hardcoded below, rather than taken from `package.json`.
#
# ! To function, the following GitHub repository secrets must be defined:
# !   CODECOV_TOKEN (optional for public repos)
# !   GPG_PRIVATE_KEY
# !   GPG_PASSPHRASE
# !   GH_TOKEN
# !   NPM_TOKEN

name: deploy

on:
  workflow_run: # ! Privileged trusted code w/ full access tokens and secrets !
    workflows: [build-test]
    types: [completed]
    branches: [main, canary]

defaults:
  run:
    shell: bash

env:
  SEMANTIC_RELEASE_NPM_INSTALL: >
    debug escape-string-regexp semver execa conventional-changelog-angular
    @semantic-release/changelog @semantic-release/exec @semantic-release/git
    semantic-release
jobs:
  metadata:
    name: 'gather-metadata'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      should-skip:
        ${{ github.event.workflow_run.conclusion != 'success' ||
        steps.metadata.outputs.should-skip == 'true' }}
      node-version: ${{ steps.metadata.outputs.node-version }}
      current-branch: ${{ steps.metadata.outputs.current-branch }}
      commit-sha: ${{ steps.metadata.outputs.commit-sha }}
      pr-number: ${{ steps.metadata.outputs.pr-number }}
      can-release: ${{ steps.metadata.outputs.can-release }}
      can-automerge: ${{ steps.metadata.outputs.can-automerge }}
      can-retry-automerge: ${{ steps.metadata.outputs.can-retry-automerge }}
      can-upload-coverage: ${{ steps.metadata.outputs.can-upload-coverage }}
      has-deploy: ${{ steps.metadata.outputs.has-deploy }}
      has-release-config: ${{ steps.metadata.outputs.has-release-config }}
      has-docs: ${{ steps.metadata.outputs.has-docs }}
      has-externals: ${{ steps.metadata.outputs.has-externals }}
      has-integration-node: ${{ steps.metadata.outputs.has-integration-node }}
      has-integration-externals:
        ${{ steps.metadata.outputs.has-integration-externals }}
      has-integration-client:
        ${{ steps.metadata.outputs.has-integration-client }}
      has-integration-webpack:
        ${{ steps.metadata.outputs.has-integration-webpack }}
      debug-string: ${{ steps.metadata.outputs.debug-string }}
      committer-name: ${{ steps.metadata.outputs.committer-name }}
      committer-email: ${{ steps.metadata.outputs.committer-email }}

    steps:
      - name: Download metadata artifact
        if: github.event.workflow_run.conclusion == 'success'
        uses: actions/github-script@v3.1.0
        with:
          # ? Unfortunately, we can't use the official action to download
          # ? artifacts across workloads, so we do it manually
          script: |
            console.log('saw run_id #${{ github.event.workflow_run.id }}');
            const artifactId = (
              await github.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.event.workflow_run.id }}
              })
            ).data.artifacts.find(
              (artifact) => artifact.name == 'metadata-${{ runner.os }}-${{ github.sha }}'
            ).id;

            console.log(`downloading artifact #${artifactId}`);
            const download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifactId,
              archive_format: 'zip'
            });

            require('fs').writeFileSync('/tmp/meta.zip', Buffer.from(download.data));

      - name: Extract artifact
        if: github.event.workflow_run.conclusion == 'success'
        run: unzip /tmp/meta.zip -d /tmp

      - name: Import metadata from artifact
        id: metadata
        if: github.event.workflow_run.conclusion == 'success'
        run: |
          node -e "$(cat <<'EOF'
            Object.entries(JSON.parse(require('fs').readFileSync('/tmp/meta.json'))).forEach(
              ([key, value]) => {
                console.log(`imported metadata: name=${key} value=${value}`);
                console.log(`::set-output name=${key}::${value}`);
              }
            );
          EOF
          )"

      - name: Report DEBUG mode status
        if: github.event.workflow_run.conclusion == 'success'
        env:
          DEBUG: ${{ steps.metadata.outputs.debug-string }}
        run: |
          if [ -n "$DEBUG" ]; then
            echo ":: CD pipeline stage started :: PIPELINE IS RUNNING IN DEBUG MODE: '$DEBUG'"
            echo "::warning::PIPELINE IS RUNNING IN DEBUG MODE: '$DEBUG'"
          else
            echo ':: CD pipeline stage started :: not in debug mode'
          fi

  upload-coverage:
    name: '[CD] upload-coverage'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - metadata
    if: |
      needs.metadata.outputs.should-skip != 'true'
      && needs.metadata.outputs.can-upload-coverage == 'true'
    env:
      DEBUG: ${{ needs.metadata.outputs.debug-string }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # ? Codecov action needs access to all history
          ref: ${{ needs.metadata.outputs.commit-sha }}
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://${{ secrets.GH_TOKEN
          }}@github.com/".insteadOf ssh://git@github.com/

      - name: Strip repository bare
        run: find -maxdepth 1 -not -name . -not -name .git -exec rm -rf {} +

      - name: Download build artifact
        uses: actions/github-script@v3.1.0
        with:
          # ? Unfortunately, we can't use the official action to download
          # ? artifacts across workloads, so we do it manually
          script: |
            console.log('saw run_id #${{ github.event.workflow_run.id }}');
            const artifactId = (
              await github.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.event.workflow_run.id }}
              })
            ).data.artifacts.find(
              (artifact) => artifact.name == 'build-${{ runner.os }}-${{ github.sha }}'
            ).id;

            console.log(`downloading artifact #${artifactId}`);
            const download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifactId,
              archive_format: 'zip'
            });

            require('fs').writeFileSync('/tmp/build.zip', Buffer.from(download.data));

      - name: Extract artifact
        run: |
          unzip /tmp/build.zip
          ! [ -z "$DEBUG" ] && ls -la || true

      - name: Attempt to upload coverage data to codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          fail_ci_if_error: false

  release:
    name: '[CD] release'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
      - metadata
    if: |
      needs.metadata.outputs.should-skip != 'true'
      && needs.metadata.outputs.can-release == 'true'
    env:
      DEBUG: ${{ needs.metadata.outputs.debug-string }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # ? semantic-release needs access to all history
          ref: ${{ needs.metadata.outputs.commit-sha }}
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://${{ secrets.GH_TOKEN
          }}@github.com/".insteadOf ssh://git@github.com/

      - name: Strip repository bare
        run: find -maxdepth 1 -not -name . -not -name .git -exec rm -rf {} +

      - name: Download build artifact
        uses: actions/github-script@v3.1.0
        with:
          # ? Unfortunately, we can't use the official action to download
          # ? artifacts across workloads, so we do it manually
          script: |
            console.log('saw run_id #${{ github.event.workflow_run.id }}');
            const artifactId = (
              await github.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.event.workflow_run.id }}
              })
            ).data.artifacts.find(
              (artifact) => artifact.name == 'build-${{ runner.os }}-${{ github.sha }}'
            ).id;

            console.log(`downloading artifact #${artifactId}`);
            const download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifactId,
              archive_format: 'zip'
            });

            require('fs').writeFileSync('/tmp/build.zip', Buffer.from(download.data));

      - name: Extract artifact
        run: |
          unzip /tmp/build.zip
          ! [ -z "$DEBUG" ] && ls -la || true

      - name: Use node ${{ needs.metadata.outputs.node-version }} (for npx only)
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ needs.metadata.outputs.node-version }}

      - name: Import gpg key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-committer-name: ${{ needs.metadata.outputs.committer-name }}
          git-committer-email: ${{ needs.metadata.outputs.committer-email }}

      - name: Perform semantic release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          SHOULD_UPDATE_CHANGELOG:
            ${{ needs.metadata.outputs.current-branch == 'main' }}
          SHOULD_DEPLOY: ${{ needs.metadata.outputs.has-deploy == 'true' }}
          GIT_AUTHOR_NAME: ${{ needs.metadata.outputs.committer-name }}
          GIT_AUTHOR_EMAIL: ${{ needs.metadata.outputs.committer-email }}
          GIT_COMMITTER_NAME: ${{ needs.metadata.outputs.committer-name }}
          GIT_COMMITTER_EMAIL: ${{ needs.metadata.outputs.committer-email }}
        run: |
          if [ -r node_modules ]; then echo 'illegal node_modules directory encountered'; exit 1; fi
          REPO=$(pwd)
          TMP=$(mktemp -d -t deploy-XXXXXXXX)
          echo "REPO: $REPO"
          echo "TMP: $TMP"
          cd $TMP
          npm install --no-save $SEMANTIC_RELEASE_NPM_INSTALL
          mv node_modules $REPO
          cd $REPO
          npx --no-install semantic-release

  # ? This job always runs except:
  # ? 1. If CI and/or CD are skipped globally or pipeline otherwise failed
  # ? 2. If the "release" job WAS NOT skipped
  # ? 3. If we cannot automerge (bad perms, not a PR, PR is a draft, etc)
  auto-merge:
    name: '[CD] auto-merge'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - metadata
      - release
    if: |
      always()
      && needs.metadata.outputs.should-skip != 'true'
      && needs.release.result == 'skipped'
      && needs.metadata.outputs.can-automerge == 'true'
    env:
      DEBUG: ${{ needs.metadata.outputs.debug-string }}
      SHA: ${{ needs.metadata.outputs.commit-sha }}
      PR: ${{ needs.metadata.outputs.pr-number }}

    steps:
      - name: 'Merge pull request'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const MAX_TRIES = 3;
            const MINIMUM_SECONDS = 10;
            const JITTER_SECONDS = 10;

            let success = false;
            let errors = [];
            let jitter = 0;

            const pullRequest = {
              number: Number(process.env.PR)
              head: {
                sha: process.env.SHA
              }
            };

            const repository = context.repo;
            const debugging = !!process.env.DEBUG;
            const canRetryMerge =
              '${{ needs.metadata.outputs.can-retry-automerge }}' == 'true';

            const delay = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));
            const withErrorHandling = (promise, failData = {}) => {
              return promise.catch((e) =>
                Promise.resolve({
                  status: e.status || 0,
                  data: { message: e.message, ...failData }
                })
              );
            };

            if (debugging) {
              console.log('MAX_TRIES:', MAX_TRIES);
              console.log('MINIMUM_SECONDS:', MINIMUM_SECONDS);
              console.log('JITTER_SECONDS:', JITTER_SECONDS);
              console.log('repository:', repository);
              console.log(
                'canRetryMerge:',
                canRetryMerge,
                ' ("${{ needs.metadata.outputs.can-retry-automerge }}")'
              );
              console.log('pullRequest.number:', pullRequest.number);
              console.log(`head_ref (sha): ${pullRequest.head.sha}`);
            }

            for (let tries = 0; !success && tries < MAX_TRIES; ++tries) {
              const failSymbol = Symbol('fail');

              try {
                const latestPullRequest = await withErrorHandling(
                  github.pulls.get(
                    {
                      owner: repository.owner,
                      repo: repository.repo,
                      pull_number: pullRequest.number
                    },
                    { failed: failSymbol }
                  )
                );

                if (debugging) {
                  console.log('latestPullRequest->status:', latestPullRequest.status);
                  console.log(
                    'latestPullRequest->message:',
                    latestPullRequest.data.message
                  );
                  console.log('latestPullRequest->failed:', latestPullRequest.data.failed);
                  console.log('latestPullRequest->state:', latestPullRequest.data.state);
                  console.log('latestPullRequest->merged:', latestPullRequest.data.merged);
                  console.log('latestPullRequest->draft:', latestPullRequest.data.draft);
                }

                if (latestPullRequest.status == 404) {
                  core.warning(
                    `Auto-merge skipped: PR #${pullRequest.number} no longer exists`
                  );
                  return;
                } else if (latestPullRequest.data.failed == failSymbol) {
                  throw new Error(
                    latestPullRequest.data.message ||
                      `failed to get PR #${pullRequest.number}: status code ${status}`
                  );
                } else if (latestPullRequest.data.merged) {
                  core.info(
                    `Auto-merge skipped: PR #${pullRequest.number} has already been merged`
                  );
                  return;
                } else if (latestPullRequest.data.draft) {
                  core.warning(
                    `Auto-merge skipped: PR #${pullRequest.number} was marked as a draft`
                  );
                  return;
                } else if (
                  latestPullRequest.status < 400 &&
                  latestPullRequest.data.state != 'open'
                ) {
                  core.warning(
                    `Auto-merge skipped: PR #${pullRequest.number} is no longer open`
                  );
                  return;
                } // ? Mergeability check is the attempt to merge itself (below)

                const {
                  status,
                  data: { merged, message }
                } = await withErrorHandling(
                  github.pulls.merge({
                    owner: repository.owner,
                    repo: repository.repo,
                    pull_number: pullRequest.number,
                    sha: pullRequest.head.sha,
                    merge_method: 'merge'
                  }),
                  { merged: false }
                );

                if (debugging) {
                  console.log('mergeAttempt->status:', status);
                  console.log('mergeAttempt->message:', message);
                  console.log('mergeAttempt->merged:', merged);
                }

                const defaultError =
                  message ||
                  `failed to merge PR #${pullRequest.number}: status code ${status}`;

                if ([403, 404, 422].includes(status)) {
                  core.setFailed(`Auto-merge failed: ${message}`);
                  return;
                } else if (status == 409) {
                  core.info(
                    `Auto-merge skipped: current HEAD is out of sync with PR #${pullRequest.number}`
                  );
                } else if (status >= 400 && status < 500 && !canRetryMerge) {
                  core.setFailed(`Auto-merge failed: ${defaultError}`);
                  return;
                } else if (!merged) {
                  throw new Error(defaultError);
                }

                success = true;
              } catch (e) {
                console.error(
                  'Auto-merge failed:',
                  e.message || e || 'an unknown error occurred'
                );

                if (tries + 1 < MAX_TRIES) {
                  const nextRetryIn = 2 ** tries * MINIMUM_SECONDS * 1000 + jitter;
                  jitter += Math.random() * JITTER_SECONDS * 1000;
                  core.warning(
                    `Auto-merge attempt ${
                      tries + 1
                    }/${MAX_TRIES} failed, next try in ${Math.round(
                      nextRetryIn / 1000
                    )} seconds`
                  );

                  await delay(nextRetryIn);
                }
              }
            }

            if (!success) core.setFailed(`Auto-merge failed after ${MAX_TRIES} attempts`);
