name: build-test-deploy

on:
  workflow_dispatch: # * treated like a `push` event with custom commit refs
  push:
    branches:  # ! if you change these branches, update the rest of this script!
      - main
      - develop
  pull_request:
    types: [opened, synchronize]

env:
  CI: true
  CI_SKIP_COMMANDS: '[skip ci];[ci skip];[skip github];[github skip]' # ! follow the pre-existing syntax
  NODE_BASE_VERSION: 14.x
  NODE_TEST_VERSIONS: '"10.x", "12.x"' # * NODE_BASE_VERSION is automatically included
  WEBPACK_TEST_VERSIONS: '"4.x", "5.x"'

jobs:
  metadata:
    name: gather-metadata
    runs-on: ubuntu-latest
    outputs:
      should-skip-ci: ${{ steps.skip-ci.outputs.should-skip == 'true' }}
      node-matrix:  ${{ steps.set-matrix.outputs.node-matrix }}
      webpack-matrix:  ${{ steps.set-matrix.outputs.webpack-matrix }}
      has-release-config: ${{ steps.data.outputs.has-release-config == 'true' }}
      has-docs: ${{ steps.data.outputs.has-docs == 'true' }}
      has-externals: ${{ steps.data.outputs.has-externals == 'true' }}
      has-integration-node: ${{ steps.data.outputs.has-integration-node == 'true' }}
      has-integration-chrome: ${{ steps.data.outputs.has-integration-chrome == 'true' }}
      has-integration-webpack: ${{ steps.data.outputs.has-integration-webpack == 'true' }}
      has-integration-externals: ${{ steps.data.outputs.has-integration-externals == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 #1000 https://github.com/mstachniuk/ci-skip#use-cases

      - name: Gather CI metadata
        uses: mstachniuk/ci-skip@v1
        with:
          commit-filter: ${{ env.CI_SKIP_COMMANDS }}
          commit-filter-separator: ';'

      - name: Save result data
        id: skip-ci
        run: echo "::set-output name=should-skip::$CI_SKIP"

      - name: Save result data
        if: steps.skip-ci.outputs.should-skip != 'true'
        id: set-matrix
        run: |
          echo "::set-output name=node-matrix::{\"node\":[$NODE_TEST_VERSIONS, \"$NODE_BASE_VERSION\"]}"
          echo "::set-output name=webpack-matrix::{\"webpack\":[$WEBPACK_TEST_VERSIONS]}"

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        if: steps.skip-ci.outputs.should-skip != 'true'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Gather and save run-script metadata
        if: steps.skip-ci.outputs.should-skip != 'true'
        id: data
        run: |
          set +e
          NPMR=`npm run`
          if [ -r release.config.js ]; then HAS_RCNF=true; else HAS_RCNF=false; fi
          echo $NPMR | grep -q build-docs
          if [ $? -eq 0 ]; then HAS_DOCS=true; else HAS_DOCS=false; fi
          echo $NPMR | grep -q build-externals
          if [ $? -eq 0 ]; then HAS_EXTS=true; else HAS_EXTS=false; fi
          echo $NPMR | grep -q test-integration-node
          if [ $? -eq 0 ]; then HAS_NODE=true; else HAS_NODE=false; fi
          echo $NPMR | grep -q test-integration-chrome
          if [ $? -eq 0 ]; then HAS_CHRM=true; else HAS_CHRM=false; fi
          echo $NPMR | grep -q test-integration-externals
          if [ $? -eq 0 ]; then HAS_IEXT=true; else HAS_IEXT=false; fi
          echo $NPMR | grep -q test-integration-webpack
          if [ $? -eq 0 ]; then HAS_WEBP=true; else HAS_WEBP=false; fi
          echo "::set-output name=has-release-config::$HAS_RCNF"
          echo "::set-output name=has-docs::$HAS_DOCS"
          echo "::set-output name=has-externals::$HAS_EXTS"
          echo "::set-output name=has-integration-node::$HAS_NODE"
          echo "::set-output name=has-integration-chrome::$HAS_CHRM"
          echo "::set-output name=has-integration-webpack::$HAS_WEBP"
          echo "::set-output name=has-integration-externals::$HAS_IEXT"
          if [ $HAS_EXTS != $HAS_IEXT ]; then
            echo '::error::expected both 1) `external-scripts` directory to exist and 2) `test-integration-externals` run-script to be defined in package.json'
            exit 1
          fi
          if [ $HAS_DOCS = 'false' ]; then
            echo '::warning::no `build-documentation` run-script defined in package.json'
          fi

  check-audit:
    runs-on: ubuntu-latest
    needs: metadata
    if: needs.metadata.outputs.should-skip-ci != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Npm audit
        run: npm audit

  test-integration-node:
    runs-on: ubuntu-latest
    needs: metadata
    if: needs.metadata.outputs.has-integration-node == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.node-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Cache npm
        uses: actions/cache@v2
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: npm ci

      - name: Build distributables
        run: npm run build-dist

      - name: Test integration
        run: npm run test-integration-node

  test-integration-externals:
    runs-on: ubuntu-latest
    needs: metadata
    if: needs.metadata.outputs.has-integration-externals == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.node-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Cache npm
        uses: actions/cache@v2
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: npm ci

      - name: Build externals
        run: npm run build-externals

      - name: Test integration
        run: npm run test-integration-externals

  test-integration-chrome:
    runs-on: ubuntu-latest
    needs: metadata
    if: needs.metadata.outputs.has-integration-chrome == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: npm ci

      - name: Build distributables
        run: npm run build-dist

      - name: Test integration
        run: npm run test-integration-chrome

  install-dependencies:
    runs-on: ubuntu-latest
    needs: metadata
    if: needs.metadata.outputs.should-skip-ci != 'true'
    outputs:
      cache-key: ${{ steps.cache.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Calculate cache-key
        id: cache
        env:
          OS: ${{ runner.os }}
          HASH: ${{ hashFiles('**/package-lock.json') }}
        run: echo "::set-output name=key::deps-$OS-$HASH"

      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-dependencies
        with:
          key: ${{ steps.cache.outputs.key }}
          path: ./node_modules

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Cache npm
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Sort package.json
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npx sort-package-json

      - name: Install CI dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm ci

  build-dist:
    runs-on: ubuntu-latest
    needs: [metadata, install-dependencies]
    if: >
      github.event_name != 'pull_request'
      || needs.metadata.outputs.has-integration-chrome == 'true'
      || needs.metadata.outputs.has-integration-webpack == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: ${{ needs.install-dependencies.outputs.cache-key }}
          path: ./node_modules

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Build distributables
        run: npm run build-dist

      - name: Cache distributables
        uses: actions/cache@v2
        id: cache-dist
        with:
          key: dist-${{ github.sha }}
          path: |
            ./dist
            ./build

  test-integration-webpack:
    runs-on: ubuntu-latest
    needs: [metadata, build-dist]
    if: needs.metadata.outputs.has-integration-webpack == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.webpack-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: ${{ needs.install-dependencies.outputs.cache-key }}
          path: ./node_modules

      - name: Restore distributables
        uses: actions/cache@v2
        id: restore-dist
        with:
          key: dist-${{ github.sha }}
          path: |
            ./dist
            ./build

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Install webpack@${{ matrix.webpack }}
        run: npm install webpack@${{ matrix.webpack }}

      - name: Test integration
        run: npm run test-integration-webpack

  build-docs:
    runs-on: ubuntu-latest
    needs: [metadata, install-dependencies]
    if: needs.metadata.outputs.has-docs == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: ${{ needs.install-dependencies.outputs.cache-key }}
          path: ./node_modules

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Build documentation
        run: npm run build-docs

      - name: Upload documentation
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v2
        with:
          name: docs-${{ github.sha }}
          path: ./docs

      - name: Cache documentation
        if: github.event_name != 'pull_request'
        uses: actions/cache@v2
        id: cache-docs
        with:
          key: docs-${{ github.sha }}
          path: ./docs

  lint:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: ${{ needs.install-dependencies.outputs.cache-key }}
          path: ./node_modules

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Lint
        run: npm run lint

  test-unit:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: ${{ needs.install-dependencies.outputs.cache-key }}
          path: ./node_modules

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Test unit
        run: npm run test-unit

  semantic-release:
    runs-on: ubuntu-latest
    needs:
      - metadata
      - check-audit
      - lint
      - build-dist
      - test-unit
      - build-docs
      - test-integration-node
      - test-integration-chrome
      - test-integration-externals
      - test-integration-webpack
    if: >
      always()
      && github.event_name != 'pull_request'
      && needs.metadata.result == 'success'
      && needs.metadata.outputs.should-skip-ci != 'true'
      && needs.metadata.outputs.has-release-config == 'true'
      && needs.check-audit.result == 'success'
      && needs.lint.result == 'success'
      && needs.build-dist.result == 'success'
      && needs.test-unit.result == 'success'
      && (needs.metadata.outputs.has-docs != 'true' || needs.build-docs.result == 'success')
      && (needs.metadata.outputs.has-integration-node != 'true' || needs.test-integration-node.result == 'success')
      && (needs.metadata.outputs.has-integration-chrome != 'true' || needs.test-integration-chrome.result == 'success')
      && (needs.metadata.outputs.has-integration-externals != 'true' || needs.test-integration-externals.result == 'success')
      && (needs.metadata.outputs.has-integration-webpack != 'true' || needs.test-integration-webpack.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 #1000 https://github.com/mstachniuk/ci-skip#use-cases
          token: ${{ secrets.GH_TOKEN }}

      - name: Restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: ${{ needs.install-dependencies.outputs.cache-key }}
          path: ./node_modules

      - name: Restore distributables
        uses: actions/cache@v2
        id: restore-dist
        with:
          key: dist-${{ github.sha }}
          path: |
            ./dist
            ./build

      - name: Restore documentation
        if: needs.metadata.outputs.has-docs
        uses: actions/cache@v2
        id: restore-docs
        with:
          key: docs-${{ github.sha }}
          path: ./docs

      - name: Use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: Import gpg key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-push-gpgsign: true

      - name: Perform semantic release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
