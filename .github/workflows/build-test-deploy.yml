name: build-test-deploy

on:
  workflow_dispatch: # * treated like a `push` event with custom commit refs
  push:
    branches:  # ! if you change these branches, update the rest of this script!
      - main
      - develop
  pull_request:
    types: [opened, synchronize]

env:
  CI: true
  NODE_BASE_VERSION: '14.x'
  NODE_VERSIONS_UNDER_TEST: ['10.x', '12.x', ${{ env.NODE_BASE_VERSION }}]
  WEBPACK_BASE_VERSION: '5.x'
  WEBPACK_VERSIONS_UNDER_TEST: ['4.x', ${{ env.WEBPACK_BASE_VERSION }}]

jobs:
  check-metadata:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '1000' # https://github.com/mstachniuk/ci-skip#use-cases

      - name: check for CI commands in commit messages
        uses: mstachniuk/ci-skip@v1
        with:
          commit-filter: '[skip ci];[ci skip];[skip github];[github skip]'
          commit-filter-separator: ';'

      - name: propagate check result
        id: ci
        run: echo "::set-output name=skip::$CI_SKIP"

      - name: use node ${{ env.NODE_BASE_VERSION }}
        if: env.CI_SKIP != 'true'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: gather and sanity check run-script metadata
        id: metadata
        if: steps.ci.outputs.skip != 'true'
        run: |
          NPMR=`npm run`
          if [ -r ./release.config.js ]; then HAS_RCNF=true; else HAS_RCNF=false; fi
          echo $NPMR | grep -q build-docs
          if [ $? -eq 0 ]; then HAS_DOCS=true; else HAS_DOCS=false; fi
          echo $NPMR | grep -q build-externals
          if [ $? -eq 0 ]; then HAS_EXTS=true; else HAS_EXTS=false; fi
          echo $NPMR | grep -q test-integration-node
          if [ $? -eq 0 ]; then HAS_NODE=true; else HAS_NODE=false; fi
          echo $NPMR | grep -q test-integration-chrome
          if [ $? -eq 0 ]; then HAS_CHRM=true; else HAS_CHRM=false; fi
          echo $NPMR | grep -q test-integration-externals
          if [ $? -eq 0 ]; then HAS_IEXT=true; else HAS_IEXT=false; fi
          echo $NPMR | grep -q test-integration-webpack
          if [ $? -eq 0 ]; then HAS_WEBP=true; else HAS_WEBP=false; fi
          echo "::set-output name=has-release-config::$HAS_RCNF"
          echo "::set-output name=has-docs::$HAS_DOCS"
          echo "::set-output name=has-externals::$HAS_EXTS"
          echo "::set-output name=has-integration-node::$HAS_NODE"
          echo "::set-output name=has-integration-chrome::$HAS_CHRM"
          echo "::set-output name=has-integration-webpack::$HAS_WEBP"
          echo "::set-output name=has-integration-externals::$HAS_IEXT"

          if [ $HAS_EXTS != $HAS_IEXT ]; then
            echo '::error::expected both 1) ./external-scripts directory to exist and 2) `test-integration-externals` run-script to be defined in package.json'
            exit 1
          fi

          if [ $HAS_DOCS = 'false' ]; then
            echo '::warning::no `build-documentation` run-script defined in package.json'
          fi

  check-audit:
    runs-on: ubuntu-latest
    needs: check-metadata
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: npm audit
        run: npm audit

  test-integration-node:
    runs-on: ubuntu-latest
    needs: check-metadata
    if: needs.check-metadata.outputs.has-integration-node == 'true'
    strategy:
      fail-fast: false
      matrix:
        node: ${{ env.NODE_VERSIONS_UNDER_TEST }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: use node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: cache npm
        uses: actions/cache@v2
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: install ci dependencies
        run: npm ci

      - name: build distributables
        run: npm run build-dist

      - name: test integration
        run: npm run test-integration-node

  test-integration-externals:
    runs-on: ubuntu-latest
    needs: check-metadata
    if: needs.check-metadata.outputs.has-integration-externals == 'true'
    strategy:
      fail-fast: false
      matrix:
        node: ${{ env.NODE_VERSIONS_UNDER_TEST }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: use node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: cache npm
        uses: actions/cache@v2
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: install ci dependencies
        run: npm ci

      - name: build externals
        run: npm run build-externals

      - name: test integration
        run: npm run test-integration-externals

  install-dependencies:
    runs-on: ubuntu-latest
    needs: check-metadata
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: cache npm
        uses: actions/cache@v2
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: sort package.json
        run: npx sort-package-json

      - name: install ci dependencies
        run: npm ci

      - name: cache dependencies
        uses: actions/cache@v2
        id: cache-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

  build-dist:
    runs-on: ubuntu-latest
    needs: [check-metadata, install-dependencies]
    if: >
      github.event_name != 'pull_request'
      || needs.check-metadata.outputs.has-integration-chrome == 'true'
      || needs.check-metadata.outputs.has-integration-webpack == 'true'
    steps:
      - name: restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: build distributables
        run: npm run build-dist

      - name: cache distributables
        uses: actions/cache@v2
        id: cache-dist
        with:
          key: build-${{ github.sha }}-dist
          path: |
            ./dist
            ./build

  test-integration-chrome:
    runs-on: ubuntu-latest
    needs: [check-metadata, build-dist]
    if: needs.check-metadata.outputs.has-integration-chrome == 'true'
    steps:
      - name: restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

      - name: restore distributables
        uses: actions/cache@v2
        id: restore-dist
        with:
          key: build-${{ github.sha }}-dist
          path: |
            ./dist
            ./build

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: test integration
        run: npm run test-integration-chrome

  test-integration-webpack:
    runs-on: ubuntu-latest
    needs: [check-metadata, build-dist]
    if: needs.check-metadata.outputs.has-integration-webpack == 'true'
    strategy:
      fail-fast: false
      matrix:
        webpack: ${{ env.WEBPACK_VERSIONS_UNDER_TEST }}
    steps:
      - name: restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

      - name: restore distributables
        uses: actions/cache@v2
        id: restore-dist
        with:
          key: build-${{ github.sha }}-dist
          path: |
            ./dist
            ./build

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: install webpack@${{ matrix.webpack }}
        run: npm install webpack@${{ matrix.webpack }}

      - name: test integration
        run: npm run test-integration-webpack

  build-docs:
    runs-on: ubuntu-latest
    needs: [check-metadata, install-dependencies]
    if: needs.check-metadata.outputs.has-docs == 'true'
    steps:
      - name: restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: build documentation
        run: npm run build-docs

      - name: upload documentation
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ github.sha }}-docs
          path: ./docs

      - name: cache documentation
        if: github.event_name != 'pull_request'
        uses: actions/cache@v2
        id: cache-docs
        with:
          key: build-${{ github.sha }}-docs
          path: ./docs

  lint:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: lint
        run: npm run lint

  test-unit:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: test unit
        run: npm run test-unit

  semantic-release:
    runs-on: ubuntu-latest
    needs:
      - check-metadata
      - check-audit
      - lint
      - build-dist
      - test-unit
      - build-docs
      - test-integration-node
      - test-integration-chrome
      - test-integration-externals
      - test-integration-webpack
    if: >
      always()
      && github.event_name != 'pull_request'
      && needs.check-metadata.result == 'success'
      && needs.check-metadata.outputs.has-release-config == 'true'
      && needs.check-audit.result == 'success'
      && needs.lint.result == 'success'
      && needs.build-dist.result == 'success'
      && needs.test-unit.result == 'success'
      && (needs.check-metadata.outputs.has-docs != 'true' || needs.build-docs.result == 'success')
      && (needs.check-metadata.outputs.has-integration-node != 'true' || needs.test-integration-node.result == 'success')
      && (needs.check-metadata.outputs.has-integration-chrome != 'true' || needs.test-integration-chrome.result == 'success')
      && (needs.check-metadata.outputs.has-integration-externals != 'true' || needs.test-integration-externals.result == 'success')
      && (needs.check-metadata.outputs.has-integration-webpack != 'true' || needs.test-integration-webpack.result == 'success')
    steps:
      - name: restore dependencies
        uses: actions/cache@v2
        id: restore-dependencies
        with:
          key: build-${{ github.sha }}
          path: ./*

      - name: restore distributables
        uses: actions/cache@v2
        id: restore-dist
        with:
          key: build-${{ github.sha }}-dist
          path: |
            ./dist
            ./build

      - name: restore documentation
        if: needs.check-metadata.outputs.has-docs == 'true'
        uses: actions/cache@v2
        id: restore-docs
        with:
          key: build-${{ github.sha }}-docs
          path: ./docs

      - name: use node ${{ env.NODE_BASE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_BASE_VERSION }}

      - name: import gpg key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-push-gpgsign: true

      - name: perform semantic release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
