# Builds and tests the commit in an unprivileged runner. The build result
# (including optional documentation), codecov result, and metadata are stored
# as artifacts at the following keys:
#   - `metadata-${{ runner.os }}-${{ github.sha }}`
#   - `build-${{ runner.os }}-${{ github.sha }}`
#
# * Note: feel free to run this workflow in forks (e.g. for testing your PR)
# * without worrying about this workflow attempting to deploy a package ðŸš€
#
# See the env configuration below for further information.

name: build-test

on:
  workflow_dispatch: # * Treated like a `push` event with a user-defined ref

  push:
    tags-ignore: ['**']
    branches-ignore: ['dependabot/**', 'snyk-**', 'no-ci/**']

  pull_request: # ! Sandbox untrusted code w/ read only tokens and NO secrets !
    types: [opened, reopened, synchronize]
    branches: [main, canary]

defaults:
  run:
    shell: bash

jobs:
  metadata:
    name: 'gather-metadata'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      should-skip-ci: ${{ steps.skip.outputs.should-skip-ci == 'true' }}
      should-skip-cd: ${{ steps.skip.outputs.should-skip-cd == 'true' }}
      node-matrix: ${{ steps.set-matrix.outputs.node-matrix }}
      webpack-matrix: ${{ steps.set-matrix.outputs.webpack-matrix }}
      current-branch: ${{ steps.branch.outputs.current-branch }}
      can-release: ${{ steps.release.outputs.can-release }}
      can-automerge: ${{ steps.automerge.outputs.can-automerge == 'true' }}
      can-retry-automerge: ${{ env.AUTOMERGE_CAN_RETRY == 'true' }}
      has-deploy: ${{ steps.data.outputs.has-deploy == 'true' }}
      has-release-config: ${{ steps.data.outputs.has-release-config == 'true' }}
      has-docs: ${{ steps.data.outputs.has-docs == 'true' }}
      has-externals: ${{ steps.data.outputs.has-externals == 'true' }}
      has-integration-node:
        ${{ steps.data.outputs.has-integration-node == 'true' }}
      has-integration-externals:
        ${{ steps.data.outputs.has-integration-externals == 'true' }}
      has-integration-client:
        ${{ steps.data.outputs.has-integration-client == 'true' }}
      has-integration-webpack:
        ${{ steps.data.outputs.has-integration-webpack == 'true' }}

    steps:
      - name: Report DEBUG mode status
        run: |
          if ! [ -z "$DEBUG" ]; then
            echo ':: CI pipeline stage started :: PIPELINE IS RUNNING IN DEBUG MODE: ''"'"$DEBUG"'"'
            echo '::warning::PIPELINE IS RUNNING IN DEBUG MODE: ''"'"$DEBUG"'"'
          else
            echo ':: CI pipeline stage started :: not in debug mode'
          fi

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1 # ! We only skip if the tippy top commit says so!
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Determine should-skip
        id: skip
        run: |
          set +e
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          ! [ -z "$DEBUG" ] && echo "LAST_COMMIT_MSG=$LAST_COMMIT_MSG" || true

          echo "$LAST_COMMIT_MSG" | grep -qE "$CI_SKIP_REGEX"
          [ $? -ne 0 ] && CI_SKIP=false || CI_SKIP=true
          ! [ -z "$DEBUG" ] && echo "CI_SKIP=$CI_SKIP" || true

          [ "$CI_SKIP" = 'true' ] || echo "$LAST_COMMIT_MSG" | grep -qE "$CD_SKIP_REGEX"
          [ $? -ne 0 ] && CD_SKIP=false || CD_SKIP=true
          ! [ -z "$DEBUG" ] && echo "CD_SKIP=$CD_SKIP" || true

          echo "::set-output name=should-skip-ci::$CI_SKIP"
          ! [ -z "$DEBUG" ] && echo "set-output name=should-skip-ci::$CI_SKIP" || true

          echo "::set-output name=should-skip-cd::$CD_SKIP"
          ! [ -z "$DEBUG" ] && echo "set-output name=should-skip-cd::$CD_SKIP" || true

      - name: Determine matrixes
        if: steps.skip.outputs.should-skip-ci != 'true'
        id: set-matrix
        run: |
          echo "::set-output name=node-matrix::{\"node\":[$NODE_TEST_VERSIONS, \"$NODE_CURRENT_VERSION\"]}"
          echo "::set-output name=webpack-matrix::{\"webpack\":[$WEBPACK_TEST_VERSIONS]}"
          ! [ -z "$DEBUG" ] && echo "set-output name=node-matrix::{\"node\":[$NODE_TEST_VERSIONS, \"$NODE_CURRENT_VERSION\"]}" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=webpack-matrix::{\"webpack\":[$WEBPACK_TEST_VERSIONS]}" || true

      - name: Gather branch metadata
        if: steps.skip.outputs.should-skip-ci != 'true'
        uses: nelonoel/branch-name@v1.0.1

      - name: Determine current-branch
        if: steps.skip.outputs.should-skip-ci != 'true'
        id: branch
        run: |
          echo "::set-output name=current-branch::$BRANCH_NAME"
          ! [ -z "$DEBUG" ] && echo "set-output name=current-branch::$BRANCH_NAME" || true

      - name: Determine if the release CD stage can run
        if: steps.skip.outputs.should-skip-ci != 'true'
        id: release
        run: |
          set +e
          node -e "process.exit('${{ env.REPO_OWNER_WHITELIST }}'.split(',').some(o => o.trim().toLowerCase() == '${{ github.repository_owner }}'.toLowerCase()) ? 0 : 1)"
          RESULT=`if [ $? -eq 0 ] && [ "${{ github.event_name }}" != "pull_request" ]; then echo 'true'; else echo 'false'; fi`
          echo "::set-output name=can-release::$RESULT"
          ! [ -z "$DEBUG" ] && echo "set-output name=can-release::$RESULT" || true

      - name: Determine if the auto-merge CD stage can run
        if: steps.skip.outputs.should-skip-ci != 'true'
        id: automerge
        run: |
          set +e
          node -e "process.exit('${{ env.AUTOMERGE_ACTOR_WHITELIST }}'.split(',').some(o => o.trim() == '${{ github.actor }}') ? 0 : 1)"
          RESULT=`if [ $? -eq 0 ] && [ "${{ github.event_name }}" = 'pull_request'] && [ "${{ github.event.pull_request.draft }}" = 'false']; then echo 'true'; else echo 'false'; fi`
          echo "::set-output name=can-automerge::$RESULT"
          ! [ -z "$DEBUG" ] && echo '[ "${{ github.event_name }}" = "pull_request"] && [ "${{ github.event.pull_request.draft }}" = "false"]' || true
          ! [ -z "$DEBUG" ] && echo "set-output name=can-automerge::$RESULT" || true

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        if: steps.skip.outputs.should-skip-ci != 'true'
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Gather remaining metadata
        if: steps.skip.outputs.should-skip-ci != 'true'
        id: data
        run: |
          set +e
          NPMR=`npm run list-tasks`
          CODE=$?

          ! [ -z "$DEBUG" ] && echo 'NPMR=' $NPMR || true

          if [ $CODE -ne 0 ]; then
            echo '::error::npm script "list-tasks" failed'
            exit 1
          fi

          if [ -r release.config.js ]; then HAS_RCNF=true; else HAS_RCNF=false; fi
          echo $NPMR | grep -qe '\sbuild-docs\s'
          if [ $? -eq 0 ]; then HAS_DOCS=true; else HAS_DOCS=false; fi
          echo $NPMR | grep -qe '\sbuild-externals\s'
          if [ $? -eq 0 ]; then HAS_EXTS=true; else HAS_EXTS=false; fi
          echo $NPMR | grep -qe '\stest-integration-node\s'
          if [ $? -eq 0 ]; then HAS_NODE=true; else HAS_NODE=false; fi
          echo $NPMR | grep -qe '\stest-integration-externals\s'
          if [ $? -eq 0 ]; then HAS_IEXT=true; else HAS_IEXT=false; fi
          echo $NPMR | grep -qe '\stest-integration-client\s'
          if [ $? -eq 0 ]; then HAS_BWSR=true; else HAS_BWSR=false; fi
          echo $NPMR | grep -qe '\stest-integration-webpack\s'
          if [ $? -eq 0 ]; then HAS_WEBP=true; else HAS_WEBP=false; fi
          echo $NPMR | grep -qe '\sdeploy\s'
          if [ $? -eq 0 ]; then HAS_DPLY=true; else HAS_DPLY=false; fi

          echo "::set-output name=has-release-config::$HAS_RCNF"
          echo "::set-output name=has-docs::$HAS_DOCS"
          echo "::set-output name=has-externals::$HAS_EXTS"
          echo "::set-output name=has-integration-node::$HAS_NODE"
          echo "::set-output name=has-integration-externals::$HAS_IEXT"
          echo "::set-output name=has-integration-client::$HAS_BWSR"
          echo "::set-output name=has-integration-webpack::$HAS_WEBP"
          echo "::set-output name=has-deploy::$HAS_DPLY"

          ! [ -z "$DEBUG" ] && echo "set-output name=has-release-config::$HAS_RCNF" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=has-docs::$HAS_DOCS" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=has-externals::$HAS_EXTS" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=has-integration-node::$HAS_NODE" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=has-integration-externals::$HAS_IEXT" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=has-integration-client::$HAS_BWSR" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=has-integration-webpack::$HAS_WEBP" || true
          ! [ -z "$DEBUG" ] && echo "set-output name=has-deploy::$HAS_DPLY" || true

          if [ "$HAS_EXTS" != "$HAS_IEXT" ]; then
            echo '::error::expected both 1) `build-externals` and 2) `test-integration-externals` scripts to be defined in package.json'
            exit 2
          fi

          if [ "$HAS_DOCS" = 'false' ]; then
            echo '::warning::no `build-docs` script defined in package.json'
          fi

          if [ "$UPLOAD_CODE_COVERAGE" = 'false' ]; then
            echo '::warning::no code coverage data will be collected for this run'
          fi

      - name: Create metadata artifact
        if: steps.skip.outputs.should-skip-ci != 'true'
        run: |
          [ -n '${{ github.event.number }}' ] && PR_NUM=${{ github.event.number }} || PR_NUM=null
          cat << EOF > /tmp/meta.json
          {
            "should-skip": ${{ steps.skip.outputs.should-skip-cd }},
            "node-version": "$NODE_CURRENT_VERSION",
            "current-branch": "${{ steps.branch.outputs.current-branch }}",
            "commit-sha": "${{ github.sha }}",
            "pr-number": $PR_NUM,
            "can-release": ${{ steps.release.outputs.can-release }},
            "can-automerge": ${{ steps.automerge.outputs.can-automerge }},
            "can-retry-automerge": $AUTOMERGE_CAN_RETRY,
            "can-upload-coverage": $UPLOAD_CODE_COVERAGE,
            "has-deploy": ${{ steps.data.outputs.has-deploy }},
            "has-release-config": ${{ steps.data.outputs.has-release-config }},
            "has-docs": ${{ steps.data.outputs.has-docs }},
            "has-externals": ${{ steps.data.outputs.has-externals }},
            "has-integration-node": ${{ steps.data.outputs.has-integration-node }},
            "has-integration-externals": ${{ steps.data.outputs.has-integration-externals }},
            "has-integration-client": ${{ steps.data.outputs.has-integration-client }},
            "has-integration-webpack": ${{ steps.data.outputs.has-integration-webpack }},
            "debug-string": "$DEBUG",
            "committer-name": "$CI_COMMITTER_NAME",
            "committer-email": "$CI_COMMITTER_EMAIL"
          }
          EOF

      - name: Upload metadata artifact
        if: steps.skip.outputs.should-skip-ci != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: metadata-${{ runner.os }}-${{ github.sha }}
          path: /tmp/meta.json
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  check-audit:
    name: '[CI] check-audit'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: needs.metadata.outputs.should-skip-ci != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Npm audit
        run: npm audit --audit-level=${{ env.NPM_AUDIT_FAIL_LEVEL }}

  lint:
    name: '[CI] lint'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: needs.metadata.outputs.should-skip-ci != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          # TODO: XXX: remove this when runner upgrades to npm@7
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Lint
        run: npm run lint

  test-unit:
    name: '[CI] test-unit'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: needs.metadata.outputs.should-skip-ci != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # ? codecov-action requires access to git history
          fetch-depth: 0
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          # TODO: XXX: remove this when runner upgrades to npm@7
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Test unit
        run: npm run test-unit

      - name: Cache coverage
        if: env.UPLOAD_CODE_COVERAGE == 'true'
        uses: actions/cache@v2.1.6
        id: cache-coverage
        with:
          key: coverage-${{ runner.os }}-${{ github.sha }}
          path: ./coverage

  test-integration-node:
    name: '[CI] test-integration-node'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: |
      needs.metadata.outputs.should-skip-ci != 'true'
      && needs.metadata.outputs.has-integration-node == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.node-matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ matrix.node }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          # TODO: XXX: remove this when runner upgrades to npm@7
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Build distributables
        run: npm run build-dist

      - name: Test integration
        env:
          MATRIX_NODE_VERSION: ${{ matrix.node }}
        run: npm run test-integration-node

  test-integration-externals:
    name: '[CI] test-integration-externals'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: |
      needs.metadata.outputs.should-skip-ci != 'true'
      && needs.metadata.outputs.has-integration-externals == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.node-matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ matrix.node }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          # TODO: XXX: remove this when runner upgrades to npm@7
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Build externals
        run: npm run build-externals

      - name: Test integration
        env:
          MATRIX_NODE_VERSION: ${{ matrix.node }}
        run: npm run test-integration-externals

  test-integration-client:
    name: '[CI] test-integration-client'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: |
      needs.metadata.outputs.should-skip-ci != 'true'
      && needs.metadata.outputs.has-integration-client == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          # TODO: XXX: remove this when runner upgrades to npm@7
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Build distributables
        run: npm run build-dist

      - name: Test integration
        run: npm run test-integration-client

  test-integration-webpack:
    name: '[CI] test-integration-webpack'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: |
      needs.metadata.outputs.should-skip-ci != 'true'
      && needs.metadata.outputs.has-integration-webpack == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.webpack-matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          # TODO: XXX: remove this when runner upgrades to npm@7
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Build distributables
        run: npm run build-dist

      - name: Test integration
        env:
          MATRIX_WEBPACK_VERSION: ${{ matrix.webpack }}
        run: npm run test-integration-webpack

  # ? Skip this job:
  # ? 1. If CI and/or CD are skipped globally
  # ? 2. On PRs
  # ? 3. In repo forks
  # ? 4. If no semantic-release configuration file at project root
  build:
    name: '[CD] build'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: |
      needs.metadata.outputs.should-skip-cd != 'true'
      && needs.metadata.outputs.can-release == 'true'
      && needs.metadata.outputs.has-release-config == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          # TODO: XXX: remove this when runner upgrades to npm@7
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Pre source formatting
        run: npm run format

      - name: Build distributables
        run: npm run build-dist

      - name: Build documentation
        if: needs.metadata.outputs.has-docs == 'true'
        run: npm run build-docs

      - name: Run formatting
        run: npm run format

      - name: Restore coverage
        if: env.UPLOAD_CODE_COVERAGE == 'true'
        uses: actions/cache@v2.1.6
        id: cache-coverage
        with:
          key: coverage-${{ runner.os }}-${{ github.sha }}
          path: ./coverage

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ runner.os }}-${{ github.sha }}
          path: |
            ./*
            !./**/node_modules
            !.git
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
